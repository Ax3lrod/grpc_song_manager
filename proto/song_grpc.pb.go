// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/song.proto

package song

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SongService_CreateSong_FullMethodName          = "/song.SongService/CreateSong"
	SongService_GetSong_FullMethodName             = "/song.SongService/GetSong"
	SongService_ListSongs_FullMethodName           = "/song.SongService/ListSongs"
	SongService_UpdateSong_FullMethodName          = "/song.SongService/UpdateSong"
	SongService_DeleteSong_FullMethodName          = "/song.SongService/DeleteSong"
	SongService_SongChat_FullMethodName            = "/song.SongService/SongChat"
	SongService_CollaboratePlaylist_FullMethodName = "/song.SongService/CollaboratePlaylist"
	SongService_Recommend_FullMethodName           = "/song.SongService/Recommend"
	SongService_StreamAllSongs_FullMethodName      = "/song.SongService/StreamAllSongs"
	SongService_StreamSongsByGenre_FullMethodName  = "/song.SongService/StreamSongsByGenre"
	SongService_StreamSongsByArtist_FullMethodName = "/song.SongService/StreamSongsByArtist"
)

// SongServiceClient is the client API for SongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongServiceClient interface {
	CreateSong(ctx context.Context, in *SongInput, opts ...grpc.CallOption) (*Song, error)
	GetSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*Song, error)
	ListSongs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongList, error)
	UpdateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error)
	DeleteSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*Empty, error)
	SongChat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SongInput, Song], error)
	CollaboratePlaylist(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlaylistAction, PlaylistUpdate], error)
	Recommend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecommendRequest, RecommendResponse], error)
	StreamAllSongs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Song], error)
	StreamSongsByGenre(ctx context.Context, in *GenreRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Song], error)
	StreamSongsByArtist(ctx context.Context, in *ArtistRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Song], error)
}

type songServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongServiceClient(cc grpc.ClientConnInterface) SongServiceClient {
	return &songServiceClient{cc}
}

func (c *songServiceClient) CreateSong(ctx context.Context, in *SongInput, opts ...grpc.CallOption) (*Song, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_CreateSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) GetSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*Song, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_GetSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) ListSongs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SongList)
	err := c.cc.Invoke(ctx, SongService_ListSongs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) UpdateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_UpdateSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) DeleteSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SongService_DeleteSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) SongChat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SongInput, Song], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[0], SongService_SongChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SongInput, Song]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_SongChatClient = grpc.BidiStreamingClient[SongInput, Song]

func (c *songServiceClient) CollaboratePlaylist(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlaylistAction, PlaylistUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[1], SongService_CollaboratePlaylist_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlaylistAction, PlaylistUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_CollaboratePlaylistClient = grpc.BidiStreamingClient[PlaylistAction, PlaylistUpdate]

func (c *songServiceClient) Recommend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecommendRequest, RecommendResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[2], SongService_Recommend_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecommendRequest, RecommendResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_RecommendClient = grpc.BidiStreamingClient[RecommendRequest, RecommendResponse]

func (c *songServiceClient) StreamAllSongs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Song], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[3], SongService_StreamAllSongs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Song]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamAllSongsClient = grpc.ServerStreamingClient[Song]

func (c *songServiceClient) StreamSongsByGenre(ctx context.Context, in *GenreRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Song], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[4], SongService_StreamSongsByGenre_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenreRequest, Song]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamSongsByGenreClient = grpc.ServerStreamingClient[Song]

func (c *songServiceClient) StreamSongsByArtist(ctx context.Context, in *ArtistRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Song], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[5], SongService_StreamSongsByArtist_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ArtistRequest, Song]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamSongsByArtistClient = grpc.ServerStreamingClient[Song]

// SongServiceServer is the server API for SongService service.
// All implementations must embed UnimplementedSongServiceServer
// for forward compatibility.
type SongServiceServer interface {
	CreateSong(context.Context, *SongInput) (*Song, error)
	GetSong(context.Context, *SongRequest) (*Song, error)
	ListSongs(context.Context, *Empty) (*SongList, error)
	UpdateSong(context.Context, *Song) (*Song, error)
	DeleteSong(context.Context, *SongRequest) (*Empty, error)
	SongChat(grpc.BidiStreamingServer[SongInput, Song]) error
	CollaboratePlaylist(grpc.BidiStreamingServer[PlaylistAction, PlaylistUpdate]) error
	Recommend(grpc.BidiStreamingServer[RecommendRequest, RecommendResponse]) error
	StreamAllSongs(*Empty, grpc.ServerStreamingServer[Song]) error
	StreamSongsByGenre(*GenreRequest, grpc.ServerStreamingServer[Song]) error
	StreamSongsByArtist(*ArtistRequest, grpc.ServerStreamingServer[Song]) error
	mustEmbedUnimplementedSongServiceServer()
}

// UnimplementedSongServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSongServiceServer struct{}

func (UnimplementedSongServiceServer) CreateSong(context.Context, *SongInput) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedSongServiceServer) GetSong(context.Context, *SongRequest) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedSongServiceServer) ListSongs(context.Context, *Empty) (*SongList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedSongServiceServer) UpdateSong(context.Context, *Song) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedSongServiceServer) DeleteSong(context.Context, *SongRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedSongServiceServer) SongChat(grpc.BidiStreamingServer[SongInput, Song]) error {
	return status.Errorf(codes.Unimplemented, "method SongChat not implemented")
}
func (UnimplementedSongServiceServer) CollaboratePlaylist(grpc.BidiStreamingServer[PlaylistAction, PlaylistUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method CollaboratePlaylist not implemented")
}
func (UnimplementedSongServiceServer) Recommend(grpc.BidiStreamingServer[RecommendRequest, RecommendResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Recommend not implemented")
}
func (UnimplementedSongServiceServer) StreamAllSongs(*Empty, grpc.ServerStreamingServer[Song]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllSongs not implemented")
}
func (UnimplementedSongServiceServer) StreamSongsByGenre(*GenreRequest, grpc.ServerStreamingServer[Song]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSongsByGenre not implemented")
}
func (UnimplementedSongServiceServer) StreamSongsByArtist(*ArtistRequest, grpc.ServerStreamingServer[Song]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSongsByArtist not implemented")
}
func (UnimplementedSongServiceServer) mustEmbedUnimplementedSongServiceServer() {}
func (UnimplementedSongServiceServer) testEmbeddedByValue()                     {}

// UnsafeSongServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongServiceServer will
// result in compilation errors.
type UnsafeSongServiceServer interface {
	mustEmbedUnimplementedSongServiceServer()
}

func RegisterSongServiceServer(s grpc.ServiceRegistrar, srv SongServiceServer) {
	// If the following call pancis, it indicates UnimplementedSongServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SongService_ServiceDesc, srv)
}

func _SongService_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_CreateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).CreateSong(ctx, req.(*SongInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_GetSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetSong(ctx, req.(*SongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_ListSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).ListSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_ListSongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).ListSongs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Song)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_UpdateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).UpdateSong(ctx, req.(*Song))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_DeleteSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).DeleteSong(ctx, req.(*SongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_SongChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongServiceServer).SongChat(&grpc.GenericServerStream[SongInput, Song]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_SongChatServer = grpc.BidiStreamingServer[SongInput, Song]

func _SongService_CollaboratePlaylist_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongServiceServer).CollaboratePlaylist(&grpc.GenericServerStream[PlaylistAction, PlaylistUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_CollaboratePlaylistServer = grpc.BidiStreamingServer[PlaylistAction, PlaylistUpdate]

func _SongService_Recommend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongServiceServer).Recommend(&grpc.GenericServerStream[RecommendRequest, RecommendResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_RecommendServer = grpc.BidiStreamingServer[RecommendRequest, RecommendResponse]

func _SongService_StreamAllSongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongServiceServer).StreamAllSongs(m, &grpc.GenericServerStream[Empty, Song]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamAllSongsServer = grpc.ServerStreamingServer[Song]

func _SongService_StreamSongsByGenre_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongServiceServer).StreamSongsByGenre(m, &grpc.GenericServerStream[GenreRequest, Song]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamSongsByGenreServer = grpc.ServerStreamingServer[Song]

func _SongService_StreamSongsByArtist_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArtistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongServiceServer).StreamSongsByArtist(m, &grpc.GenericServerStream[ArtistRequest, Song]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamSongsByArtistServer = grpc.ServerStreamingServer[Song]

// SongService_ServiceDesc is the grpc.ServiceDesc for SongService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "song.SongService",
	HandlerType: (*SongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSong",
			Handler:    _SongService_CreateSong_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _SongService_GetSong_Handler,
		},
		{
			MethodName: "ListSongs",
			Handler:    _SongService_ListSongs_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _SongService_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _SongService_DeleteSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SongChat",
			Handler:       _SongService_SongChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollaboratePlaylist",
			Handler:       _SongService_CollaboratePlaylist_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Recommend",
			Handler:       _SongService_Recommend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAllSongs",
			Handler:       _SongService_StreamAllSongs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSongsByGenre",
			Handler:       _SongService_StreamSongsByGenre_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSongsByArtist",
			Handler:       _SongService_StreamSongsByArtist_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/song.proto",
}
